"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Continuation = undefined;

var _util = require("./util.js");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class Continuation {

  constructor(scope, tokenName) {
    this.escapeSequences = scope[2] || [];
    this.closerLength = scope[1].length;
    this.closer = typeof scope[1] === "string" ? new RegExp(util.regexEscape(scope[1])) : scope[1].regex;
    this.zeroWidth = scope[3] || false;
    this.tokenName = tokenName;
  }

  process(context, continuation, buffer, line, column) {
    var _this = this;

    var processCurrent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    var foundCloser = false;
    // buffer = buffer || ""; // TODO: remove

    var _processSingle = function _processSingle(processCurrent) {
      // check for escape sequences
      var current = context.reader.current() || "";

      var maybeMinusOne = processCurrent ? 1 : 0;
      var peepStart = processCurrent ? current : "";
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.escapeSequences[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var escapeSequence = _step.value;

          var _peekValue = peepStart + context.reader.peek(escapeSequence.length - maybeMinusOne);
          if (_peekValue === escapeSequence) {
            buffer += context.reader.read(_peekValue.length - maybeMinusOne);
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var peekValue = peepStart + context.reader.peek(_this.closerLength - maybeMinusOne);
      if (_this.closer.test(peekValue)) {
        foundCloser = true;
        return false;
      }

      buffer += processCurrent ? current : context.reader.read();
      return true;
    };

    if (!processCurrent || _processSingle(true)) while (context.reader.peek() !== context.reader.EOF && _processSingle(false)) {
      // empty
    }

    if (processCurrent) {
      buffer += context.reader.current();
      context.reader.read();
    } else {
      buffer += this.zeroWidth || context.reader.peek() === context.reader.EOF ? "" : context.reader.read(this.closerLength);
    }

    // we need to signal to the context that this scope was never properly closed
    // this has significance for partial parses (e.g. for nested languages)
    if (!foundCloser) context.continuation = continuation;

    return context.createToken(this.tokenName, buffer, line, column);
  }
}
exports.Continuation = Continuation;